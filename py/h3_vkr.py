# -*- coding: utf-8 -*-
"""h3_vkr.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l-PPEcoFEBWUNhEmbDrjTUl-u159Gt4J

## Подготовительная работа
* [Installing a Library Permanently in Colab](https://saturncloud.io/blog/how-to-install-a-library-permanently-in-colab/)
"""

## connect google drive
from google.colab import drive


drive.mount('/content/drive', force_remount=True)

!pip install virtualenv
!virtualenv /content/drive/MyDrive/vkr/kmu/virtual_env

import sys


venv_path = "/content/drive/MyDrive/vkr/kmu/virtual_env/lib/python3.10/site-packages"
if venv_path not in sys.path:
  # add the path of the virtual environment site-packages to colab system path
  sys.path.append(venv_path)
sys.path

"""## H3

```bash
!source /content/drive/MyDrive/vkr/kmu/virtual_env/bin/activate; pip install pyrosm contextily mapclassify osmnx pandana h3pandas
```
"""

!source /content/drive/MyDrive/vkr/kmu/virtual_env/bin/activate; pip install bertopic

!source /content/drive/MyDrive/vkr/kmu/virtual_env/bin/activate; pip install h3pandas

!source /content/drive/MyDrive/vkr/kmu/virtual_env/bin/activate; pip install -r /content/drive/MyDrive/vkr/kmu/SOIKA/requirements.txt

#pytest -s test/

!source /content/drive/MyDrive/vkr/kmu/virtual_env/bin/activate; git clone https://github.com/iduprojects/SOIKA.git; cd SOIKA; pip install -r requirements.txt; pytest -s test/

!pip freeze

"""### Конфигурация"""

DIR_OSM = '/content/drive/MyDrive/vkr/kmu/src/osm/'
CITY = 'SanktPetersburg'
#BBOX = [30.2561753, 59.929385, 30.3637657, 59.9832816]
BBOX = [30.2665719, 59.8913232, 30.4101337, 59.9632426]

UTM_ZONE = 32636
MAP_DIST = 50
MAX_DIST = 500
MAX_ITEMS = 10

config = {
    'dir_osm': DIR_OSM,
    'city': CITY,
    'crs': UTM_ZONE,
    'filters': {
        'buildings': {
            'all': {
                'building': True
            },
            'residential_only': {
                'building': [
                'apartments',
                'residential'
              ]
            }
        },
        'POIs': {
            'shop': [
                'convenience',
                'supermarket',
                'mall',
                'greengrocer'
            ],
            'amenity': [
                'pharmacy',
                'university',
                'school',
                'kindergarten',
                'clinic',
                'car_wash'
            ],
            'healthcare': [
                'clinic'
            ]
        },
        'network_type': [
            'walking',
            'driving'
        ]
    },
    'bbox': BBOX,
    'map_dist': MAP_DIST,
    'max_dist': MAX_DIST,
    'max_items': MAX_ITEMS
}

"""### Логирование

<details>
<summary> Log levels</summary>

```py
logging.debug("A DEBUG Message")
logging.info("An INFO")
logging.warning("A WARNING")
logging.error("An ERROR")
logging.critical("A message of CRITICAL severity")
```
</details>
"""

!pwd

import logging
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

logger = logging.getLogger()
fhandler = logging.FileHandler(filename=config["dir_osm"]+'h3_'+start+'.log', mode='w')
logger.addHandler(fhandler)
logger.setLevel(logging.INFO)

"""### Загрузка подготовленных данных"""

from geopandas import read_file


fp = ''
network_type = config['filters']['network_type'][0]
#network_type = config['filters']['network_type'][1]

if 'bbox' in config:
  fp = DIR_OSM + 'spb_bbox_' + start + '.gpkg'

  # buildings
  buildings = read_file(fp, layer='buildings_with_objective_metrics')
  if buildings.crs is None:
     logger.info(f'buildings crs is None')

  # pois
  pois = read_file(fp, layer='pois').set_index('id')
  if pois.crs is None:
     logger.info(f'pois crs is None')

  # graph
  nodes = read_file(fp, layer=f'{network_type}_nodes').set_index('id')
  edges = read_file(fp, layer=f'{network_type}_edges')
  if nodes.crs is None:
     logger.info(f'graph crs is None')

  logger.info(f'read buildings/pois/{network_type}_graph from {fp}')

else:
  fp = DIR_OSM + 'spb_'+ start +'.gpkg'

  # buildings
  buildings = read_file(fp, layer='buildings_with_objective_metrics')
  if buildings.crs is None:
     logger.info(f'buildings crs is None')

  # pois
  pois = read_file(fp, layer='pois').set_index('id')
  if pois.crs is None:
     logger.info(f'pois crs is None')

  # graph
  nodes = read_file(fp, layer=f'{network_type}_nodes').set_index('id')
  edges = read_file(fp, layer=f'{network_type}_edges')
  if nodes.crs is None:
     logger.info(f'graph crs is None')

  logger.info(f'read buildings/pois/{network_type}_graph from {fp}')

buildings.head(2)

pois.head(2)

nodes.head(2)

edges.head(2)

"""### Гексагоны с Obj"""

buildings['centroid'] = buildings.centroid

buildings.head(2)

WGS84 = 4326
buildings_3d = buildings.drop(columns=['centroid_x', 'centroid_y', 'geometry']).rename(columns={'centroid': 'geometry'}).to_crs(crs=WGS84)
logger.info(f'reproject buldings to {WGS84}')

buildings_3d.head(2)

buildings_3d.shape

"""#### h3_08"""

import h3pandas

res = 8
res_tag = 'h3_08'
buildings_3d_test = buildings_3d[['obj', 'geometry']]
hex_08_with_obj = buildings_3d_test.h3.geo_to_h3_aggregate(res, operation='mean').reset_index()
logger.info(f'aggregate obj indecator to {res_tag}')

hex_08_with_obj.head(2)

hex_08_with_obj.h3_08.value_counts()

hex_08_with_obj_proj = hex_08_with_obj.to_crs(config['crs'])

hex_08_with_obj_proj.head(2)

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_08_with_obj_proj.plot(figsize=(20, 10), column='obj', legend=True, edgecolor='black', alpha=0.6)
  cx.add_basemap(ax=ax, crs=hex_08_with_obj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with obj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_obj_via_{network_type}_network_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with obj to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_08_with_obj_proj.plot(figsize=(20, 10), column='obj', legend=True, edgecolor='black', alpha=0.6)
  ax = pois.plot(ax=ax, column='pois_cat', legend=True, markersize=50, edgecolor='black')
  cx.add_basemap(ax=ax, crs=hex_08_with_obj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with obj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_obj_via_{network_type}_network_with_pois_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with obj to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_08_with_obj_proj.plot(figsize=(20, 10), column='obj', legend=True, edgecolor='black', alpha=0.6)
  ax = pois.plot(ax=ax, column='pois_cat', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(348500, 350500), ylim=(6649000, 6650300))
  cx.add_basemap(ax=ax, crs=hex_08_with_obj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with obj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_obj_via_{network_type}_network_with_pois_zoom_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with obj to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_08_with_obj_proj.plot(figsize=(20, 10), column='obj', legend=True, edgecolor='black', alpha=0.6)
  ax = pois.plot(ax=ax, column='pois_cat', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(351000, 353000), ylim=(6644500, 6646500))
  cx.add_basemap(ax=ax, crs=hex_08_with_obj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with obj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_obj_via_{network_type}_network_with_pois_zoom_extra_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with obj to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_08_with_obj_proj.plot(figsize=(20, 10), column='obj', legend=True, edgecolor='black', alpha=0.6)
  ax = buildings.plot(ax=ax, column='building', linewidth=0.4, color='red', edgecolor='black', alpha=0.6)
  ax = pois.plot(ax=ax, column='pois_cat', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(351000, 353000), ylim=(6644500, 6646500))
  cx.add_basemap(ax=ax, crs=hex_08_with_obj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with obj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_obj_via_{network_type}_network_with_pois_and_buildings_zoom_extra_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with obj to {fp}')
  plt.show()

"""#### h3_09"""

import h3pandas

res = 9
res_tag = 'h3_09'
buildings_3d_test = buildings_3d[['obj', 'geometry']]
hex_09_with_obj = buildings_3d_test.h3.geo_to_h3_aggregate(res, operation='mean').reset_index()
logger.info(f'aggregate obj indecator to {res_tag}')

hex_09_with_obj.head(2)

hex_09_with_obj.h3_09.value_counts()

hex_09_with_obj_proj = hex_09_with_obj.to_crs(config['crs'])

hex_09_with_obj_proj.head(2)

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_09_with_obj_proj.plot(figsize=(20, 10), column='obj', legend=True, edgecolor='black', alpha=0.6)
  cx.add_basemap(ax=ax, crs=hex_09_with_obj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with obj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_obj_via_{network_type}_network_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with obj to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_09_with_obj_proj.plot(figsize=(20, 10), column='obj', legend=True, edgecolor='black', alpha=0.6)
  ax = pois.plot(ax=ax, column='pois_cat', legend=True, markersize=50, edgecolor='black')
  cx.add_basemap(ax=ax, crs=hex_09_with_obj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with obj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_obj_via_{network_type}_network_with_pois_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with obj to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_09_with_obj_proj.plot(figsize=(20, 10), column='obj', legend=True, edgecolor='black', alpha=0.6)
  ax = pois.plot(ax=ax, column='pois_cat', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(348500, 350500), ylim=(6649000, 6650300))
  cx.add_basemap(ax=ax, crs=hex_09_with_obj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with obj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_obj_via_{network_type}_network_with_pois_zoom_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with obj to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_09_with_obj_proj.plot(figsize=(20, 10), column='obj', legend=True, edgecolor='black', alpha=0.6)
  ax = pois.plot(ax=ax, column='pois_cat', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(351000, 353000), ylim=(6644500, 6646500))
  cx.add_basemap(ax=ax, crs=hex_09_with_obj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with obj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_obj_via_{network_type}_network_with_pois_zoom_extra_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with obj to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_09_with_obj_proj.plot(figsize=(20, 10), column='obj', legend=True, edgecolor='black', alpha=0.6)
  ax = buildings.plot(ax=ax, column='building', linewidth=0.4, color='red', edgecolor='black', alpha=0.6)
  ax = pois.plot(ax=ax, column='pois_cat', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(351000, 353000), ylim=(6644500, 6646500))
  cx.add_basemap(ax=ax, crs=hex_09_with_obj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with obj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_obj_via_{network_type}_network_with_pois_and_buildings_zoom_extra_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with obj to {fp}')
  plt.show()

"""#### Сохранение"""

import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

fp = ''
if 'bbox' in config:
  fp = config['dir_osm'] + 'spb_bbox_' + start + '.gpkg'
  hex_08_with_obj_proj.to_file(fp, driver='GPKG', layer='hex_08_with_obj_proj', encoding='utf-8')
  hex_09_with_obj_proj.to_file(fp, driver='GPKG', layer='hex_09_with_obj_proj', encoding='utf-8')
  logger.info(f'save hexs with obj indicator to {fp}')
else:
  fp = config['dir_osm'] + 'spb_' + start + '.gpkg'
  hex_08_with_obj_proj.to_file(fp, driver='GPKG', layer='hex_08_with_obj_proj', encoding='utf-8')
  hex_09_with_obj_proj.to_file(fp, driver='GPKG', layer='hex_09_with_obj_proj', encoding='utf-8')
  logger.info(f'save hexs with obj indicator to {fp}')

"""[H3 resolution](https://russianblogs.com/article/93243931143/)

### Гексагоны с Subj
Subj = Risk (SOIKA)
"""

sys.path.append("/content/drive/MyDrive/vkr/kmu/SOIKA")
sys.path

sys.path.append("/content/SOIKA")
sys.path

!pip install bertopic==0.15.0

!pip install flair==0.12.2

import torch
import pandas as pd
from factfinder import EventDetection
import geopandas as gpd

target_texts = gpd.read_file('/content/SOIKA/data/processed/messages.geojson')
model = EventDetection()
messages, events, connections = model.run(target_texts, '/content/SOIKA/data/raw/population.geojson', 'Санкт-Петербург', 32636, min_event_size=3)

fp = config['dir_osm'] + 'messages.gpkg'
messages.to_file(fp, driver='GPKG', layer='messages', encoding='utf-8')
logger.info(f'save messages to {fp}')
events.to_file(fp, driver='GPKG', layer='events', encoding='utf-8')
logger.info(f'save events to {fp}')
connections.to_file(fp, driver='GPKG', layer='connections', encoding='utf-8')
logger.info(f'save connections to {fp}')

from geopandas import read_file

fp = config['dir_osm'] + 'messages.gpkg'
messages_from_gpkg = read_file(fp, layer='messages')
events_from_gpkg = read_file(fp, layer='events')
connections_from_gpkg = read_file(fp, layer='connections')
logger.info(f'messages, events and connections successfully loaded from gpkg')

messages_from_gpkg.head(5)

messages_from_gpkg.block.value_counts().plot(kind='bar')

messages_from_gpkg.info()

events_from_gpkg.head(5)

events_from_gpkg.info()

events_from_gpkg[events_from_gpkg.risk == events_from_gpkg.risk.max()].values

connections_from_gpkg.head(5)

events_from_gpkg.crs

events_3d = events_from_gpkg

events_3d_norm = events_3d[['risk', 'geometry']]
events_3d_norm.risk = (events_3d_norm.risk - events_3d_norm.risk.min()) / (events_3d_norm.risk.max() - events_3d_norm.risk.min())
logger.info(f'linear normalization of risk')

M = 2 # amount of metrics in obj
K = 5 # amount of categories in obj

events_3d_norm['subj'] = M * K * events_3d_norm.risk
logger.info(f'add subj indicator to events')

events_3d_norm.head(2)

"""#### h3_08"""

import h3pandas

res = 8
res_tag = 'h3_08'
hex_08_with_subj = events_3d_norm[['subj', 'geometry']].h3.geo_to_h3_aggregate(res, operation='mean').reset_index()
logger.info(f'aggregate subj indecator to {res_tag}')

hex_08_with_subj.head(2)

indexes = hex_08_with_subj.subj.nlargest(n=5).index

hex_08_with_subj.iloc[indexes]

hex_08_with_subj.h3_08.value_counts()

hex_08_with_subj.shape

hex_08_with_subj_proj = hex_08_with_subj.to_crs(config['crs'])

hex_08_with_subj_proj.head(2)

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_08_with_subj_proj.plot(figsize=(20, 10), column='subj', legend=True, edgecolor='black', alpha=0.6, cmap='YlOrRd')
  cx.add_basemap(ax=ax, crs=hex_08_with_subj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with subj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_subj_via_{network_type}_network_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with subj to {fp}')
  plt.show()

messages_from_gpkg_proj = messages_from_gpkg.to_crs(config['crs'])

messages_from_gpkg_proj['x'] = messages_from_gpkg_proj.centroid.x
messages_from_gpkg_proj['y'] = messages_from_gpkg_proj.centroid.y

logger.info(f'add x, y to messages')

import contextily as cx
from matplotlib import pyplot as plt
from cycler import cycler
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

#palette = ['#ff0000', '#663600', '#a3cc00', '#80ffc3', '#0088ff', '#d9bfff', '#a6296c', '#8c4646', '#ff8800', '#5e664d', '#269991', '#1d3f73', '#7e468c']

with plt.style.context("ggplot"):
  ax = hex_08_with_subj_proj.plot(figsize=(20, 10), column='subj', legend=True, edgecolor='black', alpha=0.6, cmap='YlOrRd')
  #ax.set_prop_cycle(cycler('color', palette))
  ax = messages_from_gpkg_proj.plot(ax=ax, column='block', legend=True, markersize=50, edgecolor='black')
  cx.add_basemap(ax=ax, crs=hex_08_with_subj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with subj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_subj_via_{network_type}_network_with_block_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with subj to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_08_with_subj_proj.plot(figsize=(20, 10), column='subj', legend=True, edgecolor='black', alpha=0.6, cmap='YlOrRd')
  ax = messages_from_gpkg_proj.plot(ax=ax, column='block', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(351000, 353000), ylim=(6644500, 6646500))
  cx.add_basemap(ax=ax, crs=hex_08_with_subj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with subj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_subj_via_{network_type}_network_with_block_zoom_extra_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with subj to {fp}')
  plt.show()

"""#### h3_09"""

import h3pandas

res = 9
res_tag = 'h3_09'
hex_09_with_subj = events_3d_norm[['subj', 'geometry']].h3.geo_to_h3_aggregate(res, operation='mean').reset_index()
logger.info(f'aggregate subj indecator to {res_tag}')

hex_09_with_subj.head(2)

hex_09_with_subj.h3_09.value_counts()

hex_09_with_subj.shape

hex_09_with_subj_proj = hex_09_with_subj.to_crs(config['crs'])

hex_09_with_subj_proj.head(2)

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_09_with_subj_proj.plot(figsize=(20, 10), column='subj', legend=True, edgecolor='black', alpha=0.6, cmap='YlOrRd')
  cx.add_basemap(ax=ax, crs=hex_09_with_subj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with subj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_subj_via_{network_type}_network_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with subj to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
from cycler import cycler
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

#palette = ['#ff0000', '#663600', '#a3cc00', '#80ffc3', '#0088ff', '#d9bfff', '#a6296c', '#8c4646', '#ff8800', '#5e664d', '#269991', '#1d3f73', '#7e468c']

with plt.style.context("ggplot"):
  ax = hex_09_with_subj_proj.plot(figsize=(20, 10), column='subj', legend=True, edgecolor='black', alpha=0.6, cmap='YlOrRd')
  #ax.set_prop_cycle(cycler('color', palette))
  ax = messages_from_gpkg_proj.plot(ax=ax, column='block', legend=True, markersize=50, edgecolor='black')
  cx.add_basemap(ax=ax, crs=hex_09_with_subj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with subj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_subj_via_{network_type}_network_with_block_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with subj to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_09_with_subj_proj.plot(figsize=(20, 10), column='subj', legend=True, edgecolor='black', alpha=0.6, cmap='YlOrRd')
  ax = messages_from_gpkg_proj.plot(ax=ax, column='block', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(351000, 353000), ylim=(6644500, 6646500))
  cx.add_basemap(ax=ax, crs=hex_09_with_subj_proj.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with subj indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_subj_via_{network_type}_network_with_block_zoom_extra_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with subj to {fp}')
  plt.show()

"""#### Сохранение"""

import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

fp = ''
if 'bbox' in config:
  fp = config['dir_osm'] + 'spb_bbox_' + start + '.gpkg'
  hex_08_with_subj_proj.to_file(fp, driver='GPKG', layer='hex_08_with_subj_proj', encoding='utf-8')
  hex_09_with_subj_proj.to_file(fp, driver='GPKG', layer='hex_09_with_subj_proj', encoding='utf-8')
  logger.info(f'save hexs with obj indicator to {fp}')
else:
  fp = config['dir_osm'] + 'spb_' + start + '.gpkg'
  hex_08_with_subj_proj.to_file(fp, driver='GPKG', layer='hex_08_with_subj_proj', encoding='utf-8')
  hex_09_with_subj_proj.to_file(fp, driver='GPKG', layer='hex_09_with_subj_proj', encoding='utf-8')
  logger.info(f'save hexs with subj indicator to {fp}')

"""### Гексагоны с UQI

#### h3_08
"""

res = 8
res_tag = 'h3_08'
hex_08_with_uqi = hex_08_with_obj_proj.merge(hex_08_with_subj_proj.drop(columns='geometry'), left_on='h3_08', right_on='h3_08')
logger.info(f'aggregate subj indecator to {res_tag}')

hex_08_with_uqi.head(2)

hex_08_with_uqi.shape

hex_08_with_uqi['uqi'] = hex_08_with_uqi.obj - hex_08_with_uqi.subj

hex_08_with_uqi.head(2)

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_08_with_uqi.plot(figsize=(20, 10), column='uqi', legend=True, edgecolor='black', alpha=0.6, cmap='inferno')
  cx.add_basemap(ax=ax, crs=hex_08_with_uqi.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with UQI indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_uqi_via_{network_type}_network_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with uqi to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_08_with_uqi.plot(figsize=(20, 10), column='uqi', legend=True, edgecolor='black', alpha=0.6, cmap='inferno')
  #ax = messages_from_gpkg_proj.plot(ax=ax, column='block', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(351000, 353000), ylim=(6644500, 6646500))
  cx.add_basemap(ax=ax, crs=hex_08_with_uqi.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with UQI indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_uqi_via_{network_type}_network_zoom_extra_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with uqi to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_08_with_uqi.plot(figsize=(20, 10), column='uqi', legend=True, edgecolor='black', alpha=0.6, cmap='inferno')
  ax = pois.plot(ax=ax, legend=True, markersize=50, color='red', edgecolor='black')
  ax = messages_from_gpkg_proj.plot(ax=ax, legend=True, markersize=50, color='blue', edgecolor='black')
  plt.setp(ax, xlim=(351000, 353000), ylim=(6644500, 6646500))

  plt.legend()
  cx.add_basemap(ax=ax, crs=hex_08_with_uqi.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with UQI indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_uqi_via_{network_type}_network_with_pois_and_blocks_zoom_extra_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with uqi to {fp}')
  plt.show()

"""#### h3_09"""

res = 9
res_tag = 'h3_09'
hex_09_with_uqi = hex_09_with_obj_proj.merge(hex_09_with_subj_proj.drop(columns='geometry'), left_on='h3_09', right_on='h3_09')
logger.info(f'aggregate subj indecator to {res_tag}')

hex_09_with_uqi.head(2)

hex_09_with_uqi.shape

hex_09_with_uqi['uqi'] = hex_09_with_uqi.obj - hex_09_with_uqi.subj

hex_09_with_uqi.head(2)

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_09_with_uqi.plot(figsize=(20, 10), column='uqi', legend=True, edgecolor='black', alpha=0.6, cmap='inferno')
  cx.add_basemap(ax=ax, crs=hex_09_with_uqi.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with UQI indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_uqi_via_{network_type}_network_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with uqi to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = hex_09_with_uqi.plot(figsize=(20, 10), column='uqi', legend=True, edgecolor='black', alpha=0.6, cmap='inferno')
  #ax = messages_from_gpkg_proj.plot(ax=ax, column='block', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(351000, 353000), ylim=(6644500, 6646500))
  cx.add_basemap(ax=ax, crs=hex_09_with_uqi.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'{res_tag} cells with UQI indicator via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/{res_tag}_cells_with_uqi_via_{network_type}_network_zoom_extra_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save {res_tag} cells with uqi to {fp}')
  plt.show()

"""#### Сохранение"""

import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

fp = ''
if 'bbox' in config:
  fp = config['dir_osm'] + 'spb_bbox_' + start + '.gpkg'
  hex_08_with_uqi.to_file(fp, driver='GPKG', layer='hex_08_with_uqi', encoding='utf-8')
  hex_09_with_uqi.to_file(fp, driver='GPKG', layer='hex_09_with_uqi', encoding='utf-8')
  logger.info(f'save hexs with obj indicator to {fp}')
else:
  fp = config['dir_osm'] + 'spb_' + start + '.gpkg'
  hex_08_with_uqi.to_file(fp, driver='GPKG', layer='hex_08_with_uqi', encoding='utf-8')
  hex_09_with_uqi.to_file(fp, driver='GPKG', layer='hex_09_with_uqi', encoding='utf-8')
  logger.info(f'save hexs with uqi indicator to {fp}')