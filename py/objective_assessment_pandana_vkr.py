# -*- coding: utf-8 -*-
"""objective_assessment_pandana_vkr.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SebW9tnBfrfwKwxNbnpzdEjLLz6ekZxY

## Подготовительная работа
* [Installing a Library Permanently in Colab](https://saturncloud.io/blog/how-to-install-a-library-permanently-in-colab/)
"""

## connect google drive
from google.colab import drive


drive.mount('/content/drive')

!pip install virtualenv
!virtualenv /content/drive/MyDrive/vkr/kmu/virtual_env

import sys


venv_path = "/content/drive/MyDrive/vkr/kmu/virtual_env/lib/python3.10/site-packages"
if venv_path not in sys.path:
  # add the path of the virtual environment site-packages to colab system path
  sys.path.append(venv_path)
sys.path

"""## Pandana

```bash
!source /content/drive/MyDrive/vkr/kmu/virtual_env/bin/activate; pip install pyrosm contextily mapclassify osmnx pandana
```
"""

!source /content/drive/MyDrive/vkr/kmu/virtual_env/bin/activate; pip install pandana

!pip freeze

"""### Конфигурация"""

DIR_OSM = '/content/drive/MyDrive/vkr/kmu/src/osm/'
CITY = 'SanktPetersburg'
#BBOX = [30.2561753, 59.929385, 30.3637657, 59.9832816]
BBOX = [30.2665719, 59.8913232, 30.4101337, 59.9632426]

UTM_ZONE = 32636
MAP_DIST = 50
MAX_DIST = 500
MAX_ITEMS = 10

config = {
    'dir_osm': DIR_OSM,
    'city': CITY,
    'crs': UTM_ZONE,
    'filters': {
        'buildings': {
            'all': {
                'building': True
            },
            'residential_only': {
                'building': [
                'apartments',
                'residential'
              ]
            }
        },
        'POIs': {
            'shop': [
                'convenience',
                'supermarket',
                'mall',
                'greengrocer'
            ],
            'amenity': [
                'pharmacy',
                'university',
                'school',
                'kindergarten',
                'clinic',
                'car_wash'
            ],
            'healthcare': [
                'clinic'
            ]
        },
        'network_type': [
            'walking',
            'driving'
        ]
    },
    'bbox': BBOX,
    'map_dist': MAP_DIST,
    'max_dist': MAX_DIST,
    'max_items': MAX_ITEMS
}

"""### Логирование

<details>
<summary> Log levels</summary>

```py
logging.debug("A DEBUG Message")
logging.info("An INFO")
logging.warning("A WARNING")
logging.error("An ERROR")
logging.critical("A message of CRITICAL severity")
```
</details>
"""

!pwd

import logging
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

logger = logging.getLogger()
fhandler = logging.FileHandler(filename=config["dir_osm"]+'obj_assessment_'+start+'.log', mode='w')
logger.addHandler(fhandler)
logger.setLevel(logging.INFO)

"""### Загрузка подготовленных данных"""

from geopandas import read_file


fp = ''
network_type = config['filters']['network_type'][0]
#network_type = config['filters']['network_type'][1]

if 'bbox' in config:
  fp = DIR_OSM + 'spb_bbox_' + start + '.gpkg'

  # buildings
  buildings = read_file(fp, layer='buildings')
  if buildings.crs is None:
     logger.info(f'buildings crs is None')

  # pois
  pois = read_file(fp, layer='pois').set_index('id')
  if pois.crs is None:
     logger.info(f'pois crs is None')

  # graph
  nodes = read_file(fp, layer=f'{network_type}_nodes').set_index('id')
  edges = read_file(fp, layer=f'{network_type}_edges')
  if nodes.crs is None:
     logger.info(f'graph crs is None')

  logger.info(f'read buildings/pois/{network_type}_graph from {fp}')

else:
  fp = DIR_OSM + 'spb_'+ start +'.gpkg'

  # buildings
  buildings = read_file(fp, layer='buildings')
  if buildings.crs is None:
     logger.info(f'buildings crs is None')

  # pois
  pois = read_file(fp, layer='pois').set_index('id')
  if pois.crs is None:
     logger.info(f'pois crs is None')

  # graph
  nodes = read_file(fp, layer=f'{network_type}_nodes').set_index('id')
  edges = read_file(fp, layer=f'{network_type}_edges')
  if nodes.crs is None:
     logger.info(f'graph crs is None')

  logger.info(f'read buildings/pois/{network_type}_graph from {fp}')

buildings.head(2)

pois.head(2)

nodes.head(2)

edges.head(2)

pois.shape

shops = pois[pois.pois_cat == 'shop']
pharmacies = pois[pois.pois_cat == 'pharmacy']
education = pois[pois.pois_cat == 'education']
clinics = pois[pois.pois_cat == 'clinics']
#leisure
custom = pois[pois.pois_cat == 'custom']

logger.info(f'divide pois on categories')

"""### Pandana network"""

import pandana


is_twoway = True
if network_type == 'driving':
  is_twoway = False

pandana_network = pandana.Network(
    node_x=nodes.x,
    node_y=nodes.y,
    edge_from=edges.u,
    edge_to=edges.v,
    edge_weights=edges[['length']],
    twoway=is_twoway
    )

logger.info(f'create pandana {network_type} network')

"""### Accessibility"""

def get_nodes(obj, category, map_dist=50):
  node_id = pandana_network.get_node_ids(
    x_col=obj.centroid_x,
    y_col=obj.centroid_y,
    mapping_distance=map_dist
    )
  logger.info(f'map {category} centroids and nodes of {network_type} network')
  return node_id
  #return node_id.astype(int, copy=True)

buildings['node_id'] = get_nodes(buildings, 'buildings', config['map_dist'])
shops['node_id'] = get_nodes(shops, 'shops', config['map_dist'])
pharmacies['node_id'] = get_nodes(pharmacies, 'pharmacies', config['map_dist'])
education['node_id'] = get_nodes(education, 'education', config['map_dist'])
clinics['node_id'] = get_nodes(clinics, 'clinics', config['map_dist'])
#leisure
custom['node_id'] = get_nodes(custom, 'custom', config['map_dist'])

buildings = buildings.dropna(subset=["node_id"])
shops = shops.dropna(subset=["node_id"])
pharmacies = pharmacies.dropna(subset=["node_id"])
education = education.dropna(subset=["node_id"])
clinics = clinics.dropna(subset=["node_id"])
#leisure
custom = custom.dropna(subset=["node_id"])

logger.info(f'drop unmapped buildings and pois')

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = nodes.plot(figsize=(20, 10), label='nodes', color='red', markersize=10, alpha=1)
  ax = edges.plot(ax=ax, label='edges', color='gray', linewidth=1, alpha=1)

  ax = buildings.plot(ax=ax, label='buildings', edgecolor='black', alpha=1)
  ax = buildings.centroid.plot(ax=ax, label='building centroids', color='black', edgecolor='black', markersize=30)
  ax = nodes.loc[buildings.node_id.astype(int)].plot(ax=ax, label='building nodes', color='green', edgecolor='black', markersize=30)
  plt.setp(ax, xlim=(348500, 349500), ylim=(6649000, 6650000))

  plt.legend()
  cx.add_basemap(ax=ax, crs=buildings.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'Map buildings centroids and nodes of {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/map_buildings_centroids_and_nodes_of_{network_type}_network_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save map buildings to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = nodes.plot(figsize=(20, 10), label='nodes', color='red', markersize=10, alpha=1)
  ax = edges.plot(ax=ax, label='edges', color='gray', linewidth=1, alpha=1)

  ax = buildings.plot(ax=ax, label='buildings', edgecolor='black', alpha=1)
  ax = buildings.centroid.plot(ax=ax, label='building centroids', color='black', edgecolor='black', markersize=30)
  ax = nodes.loc[buildings.node_id.astype(int)].plot(ax=ax, label='building nodes', color='green', edgecolor='black', markersize=30)
  plt.setp(ax, xlim=(349000, 349500), ylim=(6649000, 6649400))

  plt.legend()
  cx.add_basemap(ax=ax, crs=buildings.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'Map buildings centroids and nodes of {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/map_buildings_centroids_and_nodes_of_{network_type}_network_zoom_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save map buildings to {fp}')
  plt.show()

pandana_network.set(node_ids=buildings['node_id'], name='buildings')
pandana_network.set(node_ids=shops['node_id'], name='shops')
pandana_network.set(node_ids=pharmacies['node_id'], name='pharmacies')
pandana_network.set(node_ids=education['node_id'], name='education')
pandana_network.set(node_ids=clinics['node_id'], name='clinics')
#leisure
pandana_network.set(node_ids=custom['node_id'], name='custom')

logger.info(f'set variable_name to node groups')

pandana_network.variable_names

def calculate_accessibility(dist, aggr_type, decay, name):
  accessibility = pandana_network.aggregate(
    distance=dist,
    type=aggr_type,
    decay=decay,
    imp_name=None,
    name=name,
    )
  logger.info(f'calculate amount of {name} within {dist}m')
  return accessibility

shops_access = calculate_accessibility(dist=500, aggr_type='count', decay='linear', name='shops')
pharmacies_access = calculate_accessibility(dist=500, aggr_type='count', decay='linear', name='pharmacies')
education_access = calculate_accessibility(dist=500, aggr_type='count', decay='linear', name='education')
clinics_access = calculate_accessibility(dist=500, aggr_type='count', decay='linear', name='clinics')
#leisure
custom_access = calculate_accessibility(dist=500, aggr_type='count', decay='linear', name='custom')

shops_access.head(2)

shops_access.name = 'shops_access'
pharmacies_access.name = 'pharmacies_access'
education_access.name = 'schools_access'
clinics_access.name = 'clinics_access'
#leisure
custom_access.name = 'custom_access'

shops_access_norm = (shops_access - shops_access.min()) / (shops_access.max() - shops_access.min())
pharmacies_access_norm = (pharmacies_access - pharmacies_access.min()) / (pharmacies_access.max() - pharmacies_access.min())
education_access_norm = (education_access - education_access.min()) / (education_access.max() - education_access.min())
clinics_access_norm = (clinics_access - clinics_access.min()) / (clinics_access.max() - clinics_access.min())
#leisure
custom_access_norm = (custom_access - custom_access.min()) / (custom_access.max() - custom_access.min())

logger.info(f'linear normalization of accessibility')

nodes = nodes.merge(shops_access_norm, right_index=True, left_index=True)
nodes = nodes.merge(pharmacies_access_norm, right_index=True, left_index=True)
nodes = nodes.merge(education_access_norm, right_index=True, left_index=True)
nodes = nodes.merge(clinics_access_norm, right_index=True, left_index=True)
#leisure
nodes = nodes.merge(custom_access_norm, right_index=True, left_index=True)

logger.info(f'add accessibility to nodes')

nodes.head(2)

from pandas import Series

K = 5

nodes['access_sum'] = nodes.iloc[:,3:8].sum(axis=1)
logger.info(f'add access_sum to nodes')
nodes['k_div_access'] = [sum([1/K for _, col in row.items() if col > 0.0]) for _, row in nodes.iloc[:,3:8].iterrows()]
logger.info(f'add k_div_access to nodes')

nodes.head(2)

"""### Proximity"""

def set_pois(pois, category, maxdist, maxitems):
  pandana_network.set_pois(
    category=category,
    maxdist=maxdist,
    maxitems=maxitems,
    x_col=pois.centroid_x,
    y_col=pois.centroid_y
    )
  logger.info(f'map {category} centroids and nodes of {network_type} network')

set_pois(shops, 'shops', config['max_dist'], config['max_items'])
set_pois(pharmacies, 'pharmacies', config['max_dist'], config['max_items'])
set_pois(education, 'education', config['max_dist'], config['max_items'])
set_pois(clinics, 'clinics', config['max_dist'], config['max_items'])
#leisure
set_pois(custom, 'custom', config['max_dist'], config['max_items'])

def calculate_proximity(category, maxdist, num_pois, include_poi=False):
  columns = {(i+1):f'nearest_{category}_{i+1}' for i in range(num_pois)}
  logger.debug(columns)

  distances = pandana_network.nearest_pois(
    distance=maxdist,
    category=category,
    num_pois=num_pois,
    include_poi_ids=include_poi
  ).rename(columns=columns)
  logger.info(f'calculate distance to {num_pois} nearest {category} within {maxdist}m')
  return distances

shop_dist = calculate_proximity('shops', config['max_dist'], 1)
pharmacies_dist = calculate_proximity('pharmacies', config['max_dist'], 1)
education_dist = calculate_proximity('education', config['max_dist'], 1)
clinics_dist = calculate_proximity('clinics', config['max_dist'], 1)
#leisure
custom_dist = calculate_proximity('custom', config['max_dist'], 1)

shop_prox = 1 - ((shop_dist - shop_dist.min()) / (shop_dist.max() - shop_dist.min()))
pharmacies_prox = 1 - ((pharmacies_dist - pharmacies_dist.min()) / (pharmacies_dist.max() - pharmacies_dist.min()))
education_prox = 1 - ((education_dist - education_dist.min()) / (education_dist.max() - education_dist.min()))
clinics_prox = 1 - ((clinics_dist - clinics_dist.min()) / (clinics_dist.max() - clinics_dist.min()))
#leisure
custom_prox = 1 - ((custom_dist - custom_dist.min()) / (custom_dist.max() - custom_dist.min()))

logger.info(f'linear normalization and reverse of proximity')

nodes = nodes.merge(shop_prox, right_index=True, left_index=True)
nodes = nodes.merge(pharmacies_prox, right_index=True, left_index=True)
nodes = nodes.merge(education_prox, right_index=True, left_index=True)
nodes = nodes.merge(clinics_prox, right_index=True, left_index=True)
nodes = nodes.merge(custom_prox, right_index=True, left_index=True)

logger.info(f'add proximity to nodes')

nodes['prox_sum'] = nodes.iloc[:,10:15].sum(axis=1)
logger.info(f'add prox_sum to nodes')

nodes.head(2)

import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

fp = ''
if 'bbox' in config:
  fp = config['dir_osm'] + 'spb_bbox_' + start + '.gpkg'
  nodes.to_file(fp, driver='GPKG', layer=f'{network_type}_nodes_with_objective_metrics', encoding='utf-8')
  logger.info(f'save {network_type} nodes with objective metrics to {fp}')
else:
  fp = config['dir_osm'] + 'spb_' + start + '.gpkg'
  nodes.to_file(fp, driver='GPKG', layer=f'{network_type}_nodes_with_objective_metrics', encoding='utf-8')
  logger.info(f'save {network_type} nodes with objective metrics to {fp}')

from geopandas import read_file


nodes_from_gpkg = read_file(fp, layer=f'{network_type}_nodes_with_objective_metrics').set_index('id')

if nodes.shape[0] == nodes_from_gpkg.shape[0] and nodes.crs == nodes_from_gpkg.crs:
  logger.info(f'{network_type} nodes with objective metrics successfully loaded from gpkg')

nodes_from_gpkg.head(2)

"""### Add objective metrics to buildings"""

nodes.head(2)

buildings_with_obj_metrics = buildings.merge(nodes.reset_index().rename(columns={'id':'node_id'})[['node_id', 'access_sum', 'k_div_access']], left_on='node_id', right_on='node_id')
logger.info(f'create buildings df with objective metric')

buildings_with_obj_metrics.node_id.value_counts()

buildings_with_obj_metrics.head(2)

buildings_with_obj_metrics['accessibility'] = buildings_with_obj_metrics.access_sum * buildings_with_obj_metrics.k_div_access
logger.info(f'add accessibility to buildings_with_obj_metrics')

buildings_with_obj_metrics.head(2)

buildings_with_obj_metrics = buildings_with_obj_metrics.merge(nodes.reset_index().rename(columns={'id':'node_id'})[['node_id', 'prox_sum']], left_on='node_id', right_on='node_id')
logger.info(f'add proximity to buildings_with_obj_metrics')

buildings_with_obj_metrics = buildings_with_obj_metrics.rename(columns={'prox_sum':'proximity'})

buildings_with_obj_metrics.head(2)

buildings_with_obj_metrics["obj"] = buildings_with_obj_metrics.accessibility + buildings_with_obj_metrics.proximity
logger.info(f'add objective indicator to buildings_with_obj_metrics')

buildings_with_obj_metrics.head(2)

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = buildings_with_obj_metrics.plot(figsize=(20, 10), column='accessibility', legend=True, edgecolor='black', alpha=1, cmap='inferno')
  cx.add_basemap(ax=ax, crs=buildings.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'Buildings with accessibility via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/buildings_with_accessibility_via_{network_type}_network_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save buildings with accessibility to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = buildings_with_obj_metrics.plot(figsize=(20, 10), column='accessibility', legend=True, edgecolor='black', alpha=1, cmap='inferno')
  ax = pois.plot(ax=ax, column='pois_cat', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(348500, 350500), ylim=(6649000, 6650300))
  cx.add_basemap(ax=ax, crs=buildings.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'Buildings with accessibility via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/buildings_with_accessibility_via_{network_type}_network_zoom_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save buildings with accessibility to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = buildings_with_obj_metrics.plot(figsize=(20, 10), column='accessibility', legend=True, edgecolor='black', alpha=1, cmap='inferno')
  ax = pois.plot(ax=ax, column='pois_cat', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(351000, 353000), ylim=(6644500, 6646500))
  cx.add_basemap(ax=ax, crs=buildings.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'Buildings with accessibility via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/buildings_with_accessibility_via_{network_type}_network_zoom_extra_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save buildings with accessibility to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = buildings_with_obj_metrics.plot(figsize=(20, 10), column='proximity', legend=True, edgecolor='black', alpha=1, cmap='cividis')
  cx.add_basemap(ax=ax, crs=buildings.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'Buildings with proximity via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/buildings_with_proximity_via_{network_type}_network_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save buildings with proximity to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = buildings_with_obj_metrics.plot(figsize=(20, 10), column='proximity', legend=True, edgecolor='black', alpha=1, cmap='cividis')
  ax = pois.plot(ax=ax, column='pois_cat', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(348500, 350500), ylim=(6649000, 6650300))
  cx.add_basemap(ax=ax, crs=buildings.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'Buildings with proximity via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/buildings_with_proximity_via_{network_type}_network_zoom_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save buildings with proximity to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = buildings_with_obj_metrics.plot(figsize=(20, 10), column='proximity', legend=True, edgecolor='black', alpha=1, cmap='cividis')
  ax = pois.plot(ax=ax, column='pois_cat', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(351000, 353000), ylim=(6644500, 6646500))
  cx.add_basemap(ax=ax, crs=buildings.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'Buildings with proximity via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/buildings_with_proximity_via_{network_type}_network_zoom_extra_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save buildings with proximity to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = buildings_with_obj_metrics.plot(figsize=(20, 10), column='obj', legend=True, edgecolor='black', alpha=1, cmap='plasma')
  cx.add_basemap(ax=ax, crs=buildings.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'Buildings with obj via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/buildings_with_obj_via_{network_type}_network_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save buildings with obj indicator to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = buildings_with_obj_metrics.plot(figsize=(20, 10), column='obj', legend=True, edgecolor='black', alpha=1, cmap='plasma')
  ax = pois.plot(ax=ax, column='pois_cat', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(348500, 350500), ylim=(6649000, 6650300))
  cx.add_basemap(ax=ax, crs=buildings.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'Buildings with obj via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/buildings_with_obj_via_{network_type}_network_zoom_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save buildings with obj indicator to {fp}')
  plt.show()

import contextily as cx
from matplotlib import pyplot as plt
import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

with plt.style.context("ggplot"):
  ax = buildings_with_obj_metrics.plot(figsize=(20, 10), column='obj', legend=True, edgecolor='black', alpha=1, cmap='plasma')
  ax = pois.plot(ax=ax, column='pois_cat', legend=True, markersize=50, edgecolor='black')
  plt.setp(ax, xlim=(351000, 353000), ylim=(6644500, 6646500))
  cx.add_basemap(ax=ax, crs=buildings.crs.to_string(), source=cx.providers.CartoDB.Voyager)
  ax.set_title(f'Buildings with obj via {network_type} network', fontsize=15, fontweight='bold')
  fp = config['dir_osm']+f'images/buildings_with_obj_via_{network_type}_network_zoom_extra_'+start+'.png'
  plt.savefig(fp, bbox_inches='tight')
  logger.info(f'save buildings with obj indicator to {fp}')
  plt.show()

import datetime

start = datetime.datetime.today().strftime("%Y_%m_%d")

fp = ''
if 'bbox' in config:
  fp = config['dir_osm'] + 'spb_bbox_' + start + '.gpkg'
  buildings_with_obj_metrics.to_file(fp, driver='GPKG', layer='buildings_with_objective_metrics', encoding='utf-8')
  logger.info(f'save buildings with objective metrics to {fp}')
else:
  fp = config['dir_osm'] + 'spb_' + start + '.gpkg'
  buildings_with_obj_metrics.to_file(fp, driver='GPKG', layer='buildings_with_objective_metrics', encoding='utf-8')
  logger.info(f'save buildings with objective metrics to {fp}')

from geopandas import read_file

buildings_from_gpkg = read_file(fp, layer='buildings_with_objective_metrics')

if buildings_with_obj_metrics.shape[0] == buildings_from_gpkg.shape[0] and buildings_with_obj_metrics.crs == buildings_from_gpkg.crs:
  logger.info(f'buildings with objective metrics successfully loaded from gpkg')

buildings_from_gpkg.head(2)